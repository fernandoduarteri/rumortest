{"version":3,"sources":["components/GridItem.tsx","components/Grid.tsx","components/Search.tsx","components/LeftMenu.tsx","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["GridItem","props","photo","maxW","borderWidth","borderRadius","overflow","ml","mt","src","urls","regular","alt","alt_description","p","display","alignItems","px","colorScheme","color","fontWeight","letterSpacing","fontSize","textTransform","likes","as","lineHeight","isTruncated","user","name","GridScreen","data","templateColumns","map","Search","useState","setData","search","setSearch","maxPages","setMaxPages","useEffect","a","fetch","method","body","JSON","stringify","headers","result","json","photos","response","results","getData","handleClick","direction","w","mr","size","variant","onChange","e","target","value","pl","placeholder","width","onClick","id","leftIcon","h","textColor","backgroundColor","Swal","fire","aria-label","icon","Grid","LeftMenu","alignSelf","spacing","pt","BsArrowUpRight","BsGrid","BsSun","BsBookmark","mb","FaTwitter","App","theme","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b087eba3.chunk.js","sourcesContent":["import { Box } from '@chakra-ui/layout'\nimport { Image, Badge } from '@chakra-ui/react'\nimport React from 'react'\nimport { Photo } from '../types/photos';\n\n\nconst GridItem = (props:{photo: Photo}) => {\n  let {photo} = props;\n\n    const property = {\n        imageUrl: \"https://bit.ly/2Z4KKcF\",\n        imageAlt: \"Rear view of modern home with pool\",\n        beds: 3,\n        baths: 2,\n        title: \"Modern home in city center in the heart of historic Los Angeles\",\n        formattedPrice: \"$1,900.00\",\n        reviewCount: 34,\n        rating: 4,\n      }\n    return (\n        <Box maxW=\"sm\" borderWidth=\"1px\" borderRadius=\"lg\" overflow=\"hidden\" ml={5} mt={10}>\n      <Image src={photo.urls.regular} alt={photo.alt_description} />\n\n      <Box p=\"6\">\n        <Box display=\"flex\" alignItems=\"baseline\">\n          <Badge borderRadius=\"full\" px=\"2\" colorScheme=\"teal\">\n            New\n          </Badge>\n          <Box\n            color=\"gray.500\"\n            fontWeight=\"semibold\"\n            letterSpacing=\"wide\"\n            fontSize=\"xs\"\n            textTransform=\"uppercase\"\n            ml=\"2\"\n          >\n            Likes: {photo.likes} \n          </Box>\n        </Box>\n\n        <Box\n          mt=\"1\"\n          fontWeight=\"semibold\"\n          as=\"h4\"\n          lineHeight=\"tight\"\n          isTruncated\n        >\n          {photo.user.name}\n        </Box>\n\n        \n      </Box>\n    </Box>\n    )\n}\n\nexport default GridItem\n","import { Grid } from '@chakra-ui/layout';\nimport { type } from 'os'\nimport React, { FC } from 'react'\nimport { Photo } from '../types/photos';\nimport GridItem from './GridItem'\n\n\n\nconst GridScreen = (props:{data: Photo[]}) => {\n    let {data} = props;\n    return (\n        <Grid templateColumns='repeat(3, 1fr)'>\n            {\n                data.map((photo)=>{\n                    return(\n                        <GridItem photo={photo}/>\n    \n                    );\n                })\n            }\n\n        </Grid>\n    )\n}\n\nexport default GridScreen\n","import React, { FC, useEffect, useState } from 'react'\nimport { BsToggles, BsCheck } from \"react-icons/bs\";\nimport { Flex, Box, Input, InputGroup, Button, InputLeftElement, InputRightElement, IconButton, Spacer, Avatar } from \"@chakra-ui/react\"\nimport GridScreen from './Grid';\nimport { SyntheticEventData } from 'react-dom/test-utils';\nimport Swal from 'sweetalert2';\n\nconst Search:FC = () => {\n\n    const [data, setData] = useState([]);\n    const [search, setSearch] = useState('');\n    const [maxPages, setMaxPages] = useState(2);\n    \nuseEffect(() => {\n    const getData = async()=>{\n        let result = await fetch('https://rumor-test.herokuapp.com/api/search',{\n            method: 'POST',\n            body: JSON.stringify( {\n                \"key\":search,\n                \"page\": maxPages,\n                \"perPage\": 9\n            }),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        let data = await result.json();\n        setData(data.photos.response.results);\n\n    }\n    getData();\n}, [maxPages])\n\nconst handleClick = async ()=>{\n    let result = await fetch('https://rumor-test.herokuapp.com/api/search',{\n        method: 'POST',\n        body: JSON.stringify( {\n            \"key\":search,\n            \"page\": maxPages,\n            \"perPage\": 9\n        }),\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    });\n    let data = await result.json();\n    setData(data.photos.response.results);\n\n}\n\nconst handleChangeInput= (e: React.ChangeEvent<HTMLInputElement>)=>{\n    setSearch(e.target.value);\n\n}\n\nconst handleMovePage=()=>{\n    if(!!search){\n        setMaxPages(maxPages+1);\n    }else{\n        Swal.fire(\"UPPSS...\",\"Tell me first what do you want to see\", \"error\");\n    }\n    \n}\n\n    return (\n        \n            <Flex direction=\"column\" w=\"100%\">\n                <Flex direction=\"row\" w=\"100%\" mt={5}  mr={5}>\n\n\n                    <InputGroup w=\"80%\" size='lg' variant=\"filled\">\n                        <Input onChange={handleChangeInput} value={search}\n                            pl='6.5rem'\n                            placeholder='Search Knowledege'\n                        />\n                        <InputLeftElement width='6.5rem' >\n                            <Button onClick={handleClick} id=\"filter\" leftIcon={<BsToggles />} ml={2} p={2} h='1.75rem' size='sm' textColor=\"gray.300\" backgroundColor=\"white\"> Filters\n                            </Button>\n                        </InputLeftElement>\n                        <InputRightElement width='4.5rem' >\n                            <IconButton onClick={handleMovePage}\n                                h='1.75rem'\n                                variant=\"outline\"\n                                colorScheme=\"teal\"\n                                aria-label=\"Call Sage\"\n                                fontSize=\"20px\"\n                                icon={<BsCheck />}\n                            />\n                        </InputRightElement>\n                    </InputGroup>\n\n                    <Spacer />\n                    <Avatar src=\"https://res.cloudinary.com/torre-technologies-co/image/upload/v0/origin/starrgate/users/profile_03af4fd606a4cb9943345b50c851d54ca425be78.jpg\" />\n\n                </Flex>\n\n                <GridScreen data ={data}/>\n            </Flex>\n        \n    )\n} \n\nexport default Search\n","import React from 'react'\nimport { BsArrowUpRight, BsGrid, BsSun, BsBookmark } from \"react-icons/bs\";\nimport { FaTwitter } from \"react-icons/fa\";\nimport { Box, List, ListItem, ListIcon, Flex, Spacer, Text } from '@chakra-ui/layout'\nimport { Icon } from \"@chakra-ui/react\"\n\n\nconst LeftMenu = () => {\n    return (\n        <div>\n\n            <Flex direction=\"column\" h=\"100vh\" alignSelf=\"start\" w=\"250px\" backgroundColor=\"gray.200\">\n\n                <Box w=\"95%\">\n                    <List spacing={4} pt={4} ml={4}>\n                        <ListItem>\n                            <ListIcon as={BsArrowUpRight} color=\"gray.500\" />\n                            Explore\n                        </ListItem>\n                        <ListItem>\n                            <ListIcon as={BsGrid} color=\"gray.500\" />\n                            Topics\n                        </ListItem>\n                        <ListItem>\n                            <ListIcon as={BsSun} color=\"gray.500\" />\n                            Digest\n                        </ListItem>\n                        <ListItem>\n                            <ListIcon as={BsBookmark} color=\"gray.500\" />\n                            Bookmark\n                        </ListItem>\n                    </List>\n                </Box>\n                <Spacer />\n                <Box >\n                    <List spacing={4} pt={4} mb={4} ml={4}>\n                        <ListItem color=\"gray.500\">\n                            Blog\n                        </ListItem>\n                        <ListItem color=\"gray.500\">\n\n                            About\n                        </ListItem>\n                        <ListItem color=\"gray.500\">\n\n                            Join the beta group\n                        </ListItem>\n                        <ListItem color=\"gray.500\">\n                            <Flex alignItems=\"center\" mr={4}>\n                                <Text fontSize=\"3xl\">Curated</Text>\n                                <Spacer />\n                                <Icon as={FaTwitter} />\n                            </Flex>\n                            \n                        </ListItem>\n                    </List>\n\n                </Box>\n            </Flex>\n\n        </div>\n    )\n}\n\nexport default LeftMenu\n","import * as React from \"react\"\nimport {\n  ChakraProvider,\n  Box,\n  Text,\n  Link,\n  VStack,\n  Code,\n  Grid,\n  theme,\n} from \"@chakra-ui/react\"\nimport { ColorModeSwitcher } from \"./ColorModeSwitcher\"\nimport { Logo } from \"./Logo\"\nimport Search from \"./components/Search\"\nimport LeftMenu from \"./components/LeftMenu\"\n\nexport const App = () => (\n  <ChakraProvider theme={theme}>\n    <Box  fontSize=\"xl\" display=\"flex\"> \n      \n          <LeftMenu /> \n          <Search />\n       \n    </Box>\n  </ChakraProvider>\n)\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}